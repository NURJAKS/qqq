import streamlit as st
import requests
import json
import base64
from PIL import Image
import io
from datetime import datetime, date
import pandas as pd

# Configuration
API_BASE_URL = "http://localhost:8000"

# Initialize session state
if 'token' not in st.session_state:
    st.session_state.token = None
if 'user_info' not in st.session_state:
    st.session_state.user_info = None

def make_api_request(endpoint, method="GET", data=None, files=None, auth=True):
    """Make API request with authentication"""
    headers = {}
    if auth and st.session_state.token:
        headers["Authorization"] = f"Bearer {st.session_state.token}"
    
    url = f"{API_BASE_URL}{endpoint}"
    
    try:
        if method == "GET":
            response = requests.get(url, headers=headers)
        elif method == "POST":
            if files:
                response = requests.post(url, headers=headers, data=data, files=files)
            else:
                headers["Content-Type"] = "application/json"
                response = requests.post(url, headers=headers, json=data)
        
        return response
    except requests.exceptions.ConnectionError:
        st.error("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return None

def login_page():
    """Login and registration page"""
    st.title("üéì Alumni Club Connect")
    st.markdown("### –°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    
    tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    
    with tab1:
        st.subheader("–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        email = st.text_input("Email", key="login_email")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password")
        
        if st.button("–í–æ–π—Ç–∏", key="login_btn"):
            if email and password:
                response = make_api_request("/login", "POST", {
                    "email": email,
                    "password": password
                }, auth=False)
                
                if response and response.status_code == 200:
                    data = response.json()
                    st.session_state.token = data["access_token"]
                    
                    # Get user info
                    user_response = make_api_request("/me")
                    if user_response and user_response.status_code == 200:
                        st.session_state.user_info = user_response.json()
                        st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            else:
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    with tab2:
        st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        name = st.text_input("–ò–º—è", key="reg_name")
        email = st.text_input("Email", key="reg_email")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_password")
        role = st.selectbox("–†–æ–ª—å", ["student", "organizer"], 
                           format_func=lambda x: "–°—Ç—É–¥–µ–Ω—Ç" if x == "student" else "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")
        
        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", key="reg_btn"):
            if name and email and password:
                response = make_api_request("/register", "POST", {
                    "name": name,
                    "email": email,
                    "password": password,
                    "role": role
                }, auth=False)
                
                if response and response.status_code == 200:
                    st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
                else:
                    st.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
            else:
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

def student_dashboard():
    """Student dashboard"""
    st.title(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {st.session_state.user_info['name']}!")
    
    # Progress display
    total_hours = st.session_state.user_info['total_hours']
    progress = min(total_hours / 300, 1.0)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–ù–∞–∫–æ–ø–ª–µ–Ω–æ —á–∞—Å–æ–≤", f"{total_hours:.1f}")
    with col2:
        st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", f"{progress*100:.1f}%")
    with col3:
        st.metric("–î–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞", f"{max(300-total_hours, 0):.1f} —á")
    
    st.progress(progress)
    
    # QR Code scanning
    st.subheader("üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞")
    
    tab1, tab2 = st.tabs(["–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"])
    
    with tab1:
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º", 
                                       type=['png', 'jpg', 'jpeg'])
        
        if uploaded_file and st.button("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥"):
            files = {"file": uploaded_file.getvalue()}
            response = make_api_request("/scan-qr-image", "POST", files=files)
            
            if response and response.status_code == 200:
                data = response.json()
                st.success(data["message"])
                st.info(f"–ü–æ–ª—É—á–µ–Ω–æ —á–∞—Å–æ–≤: {data['hours_awarded']}")
                st.info(f"–í—Å–µ–≥–æ —á–∞—Å–æ–≤: {data['total_hours']}")
                
                if data.get("certificate_message"):
                    st.balloons()
                    st.success(data["certificate_message"])
                
                # Refresh user info
                user_response = make_api_request("/me")
                if user_response and user_response.status_code == 200:
                    st.session_state.user_info = user_response.json()
                    st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞")
    
    with tab2:
        qr_data = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞")
        if qr_data and st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ"):
            response = make_api_request("/scan-qr", "POST", {"qr_data": qr_data})
            
            if response and response.status_code == 200:
                data = response.json()
                st.success(data["message"])
                st.info(f"–ü–æ–ª—É—á–µ–Ω–æ —á–∞—Å–æ–≤: {data['hours_awarded']}")
                st.info(f"–í—Å–µ–≥–æ —á–∞—Å–æ–≤: {data['total_hours']}")
                
                if data.get("certificate_message"):
                    st.balloons()
                    st.success(data["certificate_message"])
                
                # Refresh user info
                user_response = make_api_request("/me")
                if user_response and user_response.status_code == 200:
                    st.session_state.user_info = user_response.json()
                    st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è")
    
    # Participation history
    st.subheader("üìä –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏—è")
    response = make_api_request("/my-participations")
    
    if response and response.status_code == 200:
        participations = response.json()
        
        if participations:
            df = pd.DataFrame(participations)
            df['event_date'] = pd.to_datetime(df['event_date']).dt.strftime('%d.%m.%Y %H:%M')
            df['timestamp'] = pd.to_datetime(df['timestamp']).dt.strftime('%d.%m.%Y %H:%M')
            
            st.dataframe(df[['event_name', 'event_date', 'hours_awarded', 'timestamp']], 
                        column_config={
                            'event_name': '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                            'event_date': '–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                            'hours_awarded': '–ß–∞—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ',
                            'timestamp': '–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è'
                        })
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–∏–π –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö")

def organizer_dashboard():
    """Organizer dashboard"""
    st.title(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {st.session_state.user_info['name']}!")
    
    tab1, tab2 = st.tabs(["–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"])
    
    with tab1:
        st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        
        name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
        event_date = st.date_input("–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", min_value=date.today())
        event_time = st.time_input("–í—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        duration = st.number_input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)", min_value=0.5, max_value=24.0, step=0.5)
        
        if st.button("–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"):
            if name and event_date and duration:
                # Combine date and time
                event_datetime = datetime.combine(event_date, event_time)
                
                response = make_api_request("/events", "POST", {
                    "name": name,
                    "description": description,
                    "date": event_datetime.isoformat(),
                    "duration": duration
                })
                
                if response and response.status_code == 200:
                    data = response.json()
                    st.success("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # Display QR code
                    st.subheader("QR-–∫–æ–¥ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
                    qr_image = base64.b64decode(data["qr_code"])
                    st.image(qr_image, caption="QR-–∫–æ–¥ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
                    
                    # Download QR code
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å QR-–∫–æ–¥",
                        data=qr_image,
                        file_name=f"qr_code_{data['event_id']}.png",
                        mime="image/png"
                    )
                    
                    st.code(f"–î–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞: {data['qr_data']}")
                else:
                    st.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            else:
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
    
    with tab2:
        st.subheader("üìÖ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        response = make_api_request("/my-events")
        
        if response and response.status_code == 200:
            events = response.json()
            
            if events:
                for event in events:
                    with st.expander(f"{event['name']} - {event['date'][:10]}"):
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {event['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}")
                        st.write(f"**–î–∞—Ç–∞:** {event['date'][:16].replace('T', ' ')}")
                        st.write(f"**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {event['duration']} —á–∞—Å–æ–≤")
                        
                        # Get participants
                        if st.button(f"–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", key=f"participants_{event['id']}"):
                            participants_response = make_api_request(f"/events/{event['id']}/participants")
                            
                            if participants_response and participants_response.status_code == 200:
                                participants_data = participants_response.json()
                                participants = participants_data["participants"]
                                
                                st.write(f"**–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {participants_data['total_participants']}")
                                
                                if participants:
                                    df = pd.DataFrame(participants)
                                    df['timestamp'] = pd.to_datetime(df['timestamp']).dt.strftime('%d.%m.%Y %H:%M')
                                    
                                    st.dataframe(df[['user_name', 'user_email', 'timestamp', 'hours_awarded']], 
                                                column_config={
                                                    'user_name': '–ò–º—è',
                                                    'user_email': 'Email',
                                                    'timestamp': '–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è',
                                                    'hours_awarded': '–ß–∞—Å–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ'
                                                })
                                else:
                                    st.info("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            else:
                st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")

def main():
    """Main application"""
    st.set_page_config(
        page_title="Alumni Club Connect",
        page_icon="üéì",
        layout="wide"
    )
    
    # Sidebar
    with st.sidebar:
        if st.session_state.token:
            st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {st.session_state.user_info['name']}")
            st.write(f"**–†–æ–ª—å:** {st.session_state.user_info['role']}")
            st.write(f"**Email:** {st.session_state.user_info['email']}")
            
            if st.button("–í—ã–π—Ç–∏"):
                st.session_state.token = None
                st.session_state.user_info = None
                st.rerun()
        else:
            st.write("–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    # Main content
    if not st.session_state.token:
        login_page()
    else:
        if st.session_state.user_info['role'] == 'student':
            student_dashboard()
        elif st.session_state.user_info['role'] == 'organizer':
            organizer_dashboard()
        else:
            st.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

if __name__ == "__main__":
    main()
